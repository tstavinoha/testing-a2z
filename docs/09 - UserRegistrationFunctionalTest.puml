@startuml
!include <C4/C4_Component.puml>

AddBoundaryTag(integrationBoundaryTag, $bgColor="#C7E9B0", $legendText="Integration layer")
AddBoundaryTag(applicationBoundaryTag, $bgColor="#E3F2C1", $legendText="Application layer")
AddBoundaryTag(domainBoundaryTag, $bgColor="#F6FFDE", $legendText="Domain layer")

System_Boundary(identityBoundary, "Identity Service") {

    ContainerDb(database, "Database", "H2", "In-memory storage")

    System_Boundary(identityApplicationBoundary, "Identity Integration Layer", $tags="integrationBoundaryTag") {

        System_Boundary(identityApplicationBoundary, "Identity Application Layer", $tags="applicationBoundaryTag") {

            System_Boundary(identityDomainBoundary, "Identity Domain Layer", $tags="domainBoundaryTag") {
                together {
                    Component(user, "User", "Java", "Representation of a user registered on the platform.")
                    Component(password, "Password", "Java Interface", "Representation of a user password.")
                }

                Component(userIdGenerator, "UserIdGenerator", "Java Interface", "Interface for generating user ids.")
                Component(userFactory, "UserFactory", "Java", "Factory for creating new users.")

                Rel(userFactory, userIdGenerator, "Generates IDs using")
                Rel(userFactory, user, "Creates")

                together {
                    Component(passwordValidator, "PasswordValidator", "Java", "Validates plain text passwords.")
                    Component(passwordCharacterType, "PasswordCharacterType", "Java", "Represents a type of character that may appear in a password.")
                    Component(passwordValidationError, "PasswordValidationError", "Java", "Describes a reason why password validation failed.")
                    Component(invalidPasswordException, "InvalidPasswordException", "Java", "An exception thrown when password is not valid, containing more information about why the validation failed.")
                }

                Rel(passwordValidator, passwordCharacterType, "Determines")
                Rel(invalidPasswordException, passwordValidationError, "Contains")
                Rel(passwordValidator, invalidPasswordException, "Throws")

                System_Boundary(hashedPasswordBoundary, "Hashed Password") {
                    Component(hashedPassword, "Hashed Password", "Java", "Representation of a salted and hashed user password.")
                    Component(hashedPasswordFactory, "HashedPasswordFactory", "Java", "Factory for creating new hashed passwords.")
                    Component(saltGenerator, "SaltGenerator", "Java Interface", "Interface for generating salt.")
                    Component(hasher, "Hasher", "Java Interface", "Interface for hashing text.")

                    Rel(hashedPassword, password, "Implements")
                    Rel(hashedPassword, hasher, "Checks hashes using")
                    Rel(hashedPasswordFactory, hasher, "Hashes using")
                    Rel(hashedPasswordFactory, saltGenerator, "Generates salt using")
                    Rel(hashedPasswordFactory, hashedPassword, "Creates")
                    Rel(hashedPasswordFactory, passwordValidator, "Validates using")
                    Rel(userFactory, hashedPasswordFactory, "Generates passwords using")
                }

                Rel(user, password, "Authenticates using")

            }

            Component(verifyPasswordQuery, "VerifyPasswordQuery", "Java", "Inbound port for verification of user password.")
            Component(registerUserUseCase, "RegisterUserUseCase", "Java", "Inbound port for user registration.")

            Component(createUserPort, "CreateUserPort", "Java", "Outbound port for user creation.")
            Component(findUserPort, "FindUserPort", "Java", "Outbound port for finding users.")

            Component(userService, "UserService", "Java", "Inbound port for user registration.")

            Rel(userService, verifyPasswordQuery, "Implements")
            Rel(userService, registerUserUseCase, "Implements")
            Rel(userService, userFactory, "Uses")
            Rel(userService, findUserPort, "Uses")
            Rel(userService, createUserPort, "Uses")
        }

        Component(randomUuidGenerator, "RandomUuidGenerator", "Java", "Generates user IDs as random UUIDs.")
        Rel(randomUuidGenerator, userIdGenerator, "Implements")

        Component(userController, "UserController", "Spring MVC", "Exposes use cases and queries via HTTP.")
        Rel(userController, verifyPasswordQuery, "Verifies passwords")
        Rel(userController, registerUserUseCase, "Registers users")

        Component(userEntity, "UserEntity", "JPA", "Model for storing the user in a database")
        Component(userJpaRepository, "UserJpaRepository", "Spring Data JPA", "Repository for persistence of UserEntities")
        Component(userPersistenceAdapter, "UserPersistenceAdapter", "Java", "Implementation of application layer outbound ports")

        Rel(userJpaRepository, userEntity, "Stores and loads")
        Rel_L(userJpaRepository, database, "Persists using")
        Rel(userPersistenceAdapter, userJpaRepository, "Persists using")
        Rel(userPersistenceAdapter, createUserPort, "Implements")
        Rel(userPersistenceAdapter, findUserPort, "Implements")

    }
}

Component(testEntryPoint, "Test Entry Point")
Rel(testEntryPoint, userController, "Registers users", "HTTP")

SHOW_LEGEND()

@enduml
