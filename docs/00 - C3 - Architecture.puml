@startuml
!include <C4/C4_Component.puml>

Container_Ext(spaContainer, "Single-Page Application", "React", "Provides our platform's functionality to users via web.")
Container_Ext(mobileAppContainer, "Mobile App", "Ionic", "Provides our platform's functionality to users via a mobile app.")
Container_Ext(frontendServerContainer, "Frontend Server", "Java Spring MVC", "Enables client apps to use our platform.")
ContainerDb(database, "Database", "H2", "In-memory storage")

Rel(spaContainer, frontendServerContainer, "Uses functionality of", "HTTP")
Rel(mobileAppContainer, frontendServerContainer, "Uses functionality of", "HTTP")

System_Boundary(identityBoundary, "Identity Service") {

    System_Boundary(identityApplicationBoundary, "Identity Integration Layer") {

        System_Boundary(identityApplicationBoundary, "Identity Application Layer") {

            System_Boundary(identityDomainBoundary, "Identity Domain Layer") {
                together {
                    Component(user, "User", "Java", "Representation of a user registered on the platform.")
                    Component(password, "Password", "Java Interface", "Representation of a user password.")
                }

                Component(userIdGenerator, "UserIdGenerator", "Java Interface", "Interface for generating user ids.")
                Component(userFactory, "UserFactory", "Java", "Factory for creating new users.")

                Rel(userFactory, userIdGenerator, "Generates IDs using")
                Rel(userFactory, user, "Creates")

                together {
                    Component(passwordValidator, "PasswordValidator", "Java", "Validates plain text passwords.")
                    Component(passwordCharacterType, "PasswordCharacterType", "Java", "Represents a type of character that may appear in a password.")
                }

                Rel(passwordValidator, passwordCharacterType, "Determines")

                System_Boundary(hashedPasswordBoundary, "Hashed Password") {
                    Component(hashedPassword, "Hashed Password", "Java", "Representation of a salted and hashed user password.")
                    Component(hashedPasswordFactory, "HashedPasswordFactory", "Java", "Factory for creating new hashed passwords.")
                    Component(saltGenerator, "SaltGenerator", "Java Interface", "Interface for generating salt.")
                    Component(hasher, "Hasher", "Java Interface", "Interface for hashing text.")

                    Rel(hashedPassword, password, "Implements")
                    Rel(hashedPassword, hasher, "Checks hashes using")
                    Rel(hashedPasswordFactory, hasher, "Hashes using")
                    Rel(hashedPasswordFactory, saltGenerator, "Generates salt using")
                    Rel(hashedPasswordFactory, hashedPassword, "Generates salt using")
                    Rel(hashedPasswordFactory, passwordValidator, "Validates using")
                    Rel(userFactory, hashedPasswordFactory, "Generates passwords using")
                }

                Rel(user, password, "Authenticates using")

            }

            Component(verifyPasswordQuery, "VerifyPasswordQuery", "Java", "Inbound port for verification of user password.")
            Component(registerUserUseCase, "RegisterUserUseCase", "Java", "Inbound port for user registration.")

            Component(createUserPort, "CreateUserPort", "Java", "Outbound port for user creation.")
            Component(findUserPort, "FindUserPort", "Java", "Outbound port for finding users.")

            Component(userService, "UserService", "Java", "Inbound port for user registration.")

            Rel(userService, verifyPasswordQuery, "Implements")
            Rel(userService, registerUserUseCase, "Implements")
            Rel(userService, userFactory, "Uses")
            Rel(userService, findUserPort, "Uses")
            Rel(userService, createUserPort, "Uses")
        }

        Component(randomUuidGenerator, "RandomUuidGenerator", "Java", "Generates user IDs as random UUIDs.")
        Rel(randomUuidGenerator, userIdGenerator, "Implements")

        Component(userController, "UserController", "Spring MVC", "Exposes use cases and queries via HTTP.")
        Rel(userController, verifyPasswordQuery, "Verifies passwords")
        Rel(userController, registerUserUseCase, "Registers users")

        Component(userEntity, "UserEntity", "JPA", "Model for storing the user in a database")
        Component(userJpaRepository, "UserJpaRepository", "Spring Data JPA", "Repository for persistence of UserEntities")
        Component(userPersistenceAdapter, "UserPersistenceAdapter", "Java", "Implementation of application layer outbound ports")

        Rel(userJpaRepository, userEntity, "Registers users")
        Rel_L(userJpaRepository, database, "Persists using")
        Rel(userPersistenceAdapter, userJpaRepository, "Persists using")
        Rel(userPersistenceAdapter, createUserPort, "Implements")
        Rel(userPersistenceAdapter, findUserPort, "Implements")


    }
}

Rel(frontendServerContainer, userController, "Verifies passwords", "HTTP")
Rel(frontendServerContainer, userController, "Registers users", "HTTP")

SHOW_LEGEND()

@enduml
